% Generated by roxygen2 (4.0.1): do not edit by hand
\name{dygraph}
\alias{dygraph}
\title{Plot an interactive dygraph chart}
\usage{
dygraph(data, x, y, y2, sync = FALSE, defaults = TRUE, rebase = c(NULL,
  100, "percent"), ribbon = list(colors = NULL, height = 1, pos = 0),
  candlestick = is.OHLC(data), trades = NULL, signals = NULL, ...)
}
\arguments{
\item{data}{data.frame}

\item{x}{optional character string identifying column in the data for x-axis
(TODO: support for vector). If not supplied, attempt is made to detect it
from timeBased data columns or rownames}

\item{y}{optional character string identifying column in the data for y-axis
series (TODO: support for vector)}

\item{y2}{(not yet supported) optional character string identifying column
in the data for secondary y-axis series (TODO: support for vector)}

\item{sync}{logical default FALSE. Set to TRUE and dygraph will react to
highlights and redraws in other dygraphs on the same page.
(TODO: supply vector of chartIds to sync this chart with)}

\item{...}{further options passed to the dygraph options slot.
See http://dygraphs.com/options.html}

\item{defaults}{logical. Should some dygraph options defaults be preloaded?
Default is TRUE. Options supplied via ... will still override these defaults.}

\item{rebase}{either non-negative nonzero numeric or "percent" string. Default
NULL. If provided, the chart lends itself to comparison of growth rates of multiple
series expressed as indices starting from same base ("percent" starts from 0%).
Redrawn on each zoom/pan action.}

\item{ribbon}{character vector or list. Draw colorful ribbon in the background.
Useful for highlighting specific events/periods. `colors` - character vector
of colors with the same length as NROW(data). `height` and `pos` are numeric
arguments from <0,1> interval specifying ribbon size and position relative
to the canvas.}

\item{candlestick}{logical. Display OHLC data as candlesticks?
Defaults to is.OHLC(data). Effort is made to detect OHLC columns by their names.
data must contain all of the four series. Redundant columns are discarded.}

\item{trades}{data.frame with columns c("Start", "End", "Side", "Base", "PL").}

\item{signals}{data.frame with columns c("Date", "Price", "sig"), see examples.}
}
\description{
Some desc
}
\examples{
library(quantmod); require(data.table)
getSymbols("SPY", from = "2001-01-01")

# candlestick
dygraph(data=SPY, legendFollow=T, candlestick=T)
dygraph(data=SPY, legendFollow=T) #autodetects is.OHLC(data)

# trade annotations (arrows)
data(trades)
dygraph(data=SPY[,"SPY.Close"], legendFollow=TRUE, trades=trades)

# relative performance
getSymbols("IBM", from = "2001-01-01", adjust=T)
dygraph(merge(IBM[,"IBM.Adjusted"], SPY[,"SPY.Adjusted"]), rebase="percent")

# color ribbon (highlight special events)
dydata=SPY[,"SPY.Close"]
colors = rep("transparent", NROW(dydata)) # must equal NROW(data)
colors[1000:1550] = "lightgreen" # accepts "#90EE90" representation too
colors[1700:2050] = "red"
colors[2060:2140] = "lightblue"
dygraph(data=dydata, ribbon=colors)
dygraph(data=dydata, ribbon=list(colors=colors, height=0.2, pos=0.1))

# dygraph on univariate data in data.frame
data <- data.frame(date = index(SPY), SPY = SPY[,"SPY.Close",drop=TRUE])
# calc indicators
setDT(data)[,`:=`(SPY.sma50 = TTR::SMA(SPY, 50), SPY.sma200 = TTR::SMA(SPY, 200))]
# dygraph a little more control and some commonly used options
dygraph(data = as.data.frame(data),
        x = "date",
        y = c("SPY","SPY.sma50","SPY.sma200"),
        logscale = FALSE,
        title = "my SPY price chart",
        xlabel = "time",
        ylabel = "SPY price",
        colors = c("black","red","blue"))
# populate signals SMA200/SMA50 cross
signals <- data[,.SD # prevent write to `data`
                ][,sig:=ifelse(SPY.sma50>SPY.sma200, 1, ifelse(SPY.sma50<SPY.sma200, -1, NA_real_))
                  ][,sig:=zoo::na.locf(sig,na.rm=FALSE) # fill gaps with last sig
                    ][is.na(sig), sig:=0 # decode leading NA to 0
                      ][,sig_change:=sig!=c(0,sig[.I-1]) # check if signal changed
                        ][sig_change==FALSE, sig:=0 # skip signals when no change
                          ][,list(Date=date,Price=SPY,sig=c(0,sig[.I-1])) # apply 1 period lag
                            ]
# dygraph and signals
dygraph(data = as.data.frame(data),
        x = "date",
        y = c("SPY","SPY.sma50","SPY.sma200"),
        logscale = FALSE,
        title = "my SPY price chart",
        xlabel = "time",
        ylabel = "SPY price",
        colors = c("black","red","blue"),
        signals = signals)
}

